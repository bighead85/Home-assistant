homeassistant:
  # Name of the location where Home Assistant is running
  name: Home
  # Location required to calculate the time the sun rises and sets
  latitude: !secret lat
  longitude: !secret long
  # Impacts weather/sunrise data (altitude above sea level in meters)
  elevation: 0
  # metric for Metric, imperial for Imperial
  unit_system: metric
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: Europe/London
  # Customization file
  customize: !include customize.yaml
  customize_glob: !include customize_glob.yaml

  auth_providers:
   - type: homeassistant
  # - type: legacy_api_password


# Show links to resources in log and frontend
#introduction:

# Enables the frontend
frontend:
  javascript_version: latest
  themes: !include_dir_merge_named themes/
  # extra_html_url:
  #   - /local/custom_ui/state-card-floorplan.html
  # extra_html_url_es5:
  #   - /local/custom_ui/state-card-floorplan.html
  extra_html_url:
     - /local/custom_ui/state-card-mini-media-player.html
    # - /local/custom_ui/state-card-custom-ui.html
lovelace:
  mode: yaml

# Enables configuration UI
config:

customizer:
  custom_ui: hosted

#Theme front page by user select
input_select:
  hass_theme:
    name: Themes
    options:
      - default
      - night
    initial: default
    icon: mdi:theme-light-dark

  alarm_zone:
    name: Alarm Zone
    options:
      - Mark Bedroom
      - Olivia Bedroom
      - Lounge
      - All
      - None
    initial: None
    icon: mdi:map-marker

input_boolean:
  alexa_alarm:
    name: Alexa Alarm
    initial: off
    icon: mdi:run
  away_mode:
    name: Away Mode
    initial: off
    icon: mdi:beach

input_text:
  dummy_spot:
    name: Spotify

http:
  # Secrets are defined in the file secrets.yaml
  api_password: !secret http_password
  # Uncomment this if you are using SSL/TLS, running in Docker container, etc.
  base_url: !secret url
  ssl_certificate: !secret cert
  ssl_key: !secret key

#Link my IFTTT Maker
ifttt:
  key: !secret ifttt

# Checks for available updates
# Note: This component will send some information about your system to
# the developers to assist with development of Home Assistant.
# For more information, please see:
# https://home-assistant.io/blog/2016/10/25/explaining-the-updater/
updater:
  # Optional, allows Home Assistant developers to focus on popular components.
  # include_used_components: true

# Discover some devices automatically
#discovery:

#Ikea Lights
tradfri:
   host: "192.168.137.35"


##TV BIAS Lights
light:
  - platform: flux_led
    devices:
      192.168.137.158:
        name: TV BIAS
        mode: "rgb"

media_player:
  #Bedroom OSMC
  - platform: kodi
    port: 1025
    username: !secret bedusr
    password: !secret bedpwd
    host: 192.168.137.12
    name: bedroom
  #Olivia Kodi
  - platform: kodi
    port: 1025
    username: !secret bedusr
    password: !secret bedpwd
    host: 192.168.137.63
    name: olivia
  #Alexa Stick Kodi (TV)
  - platform: kodi
    port: 1025
    username: !secret tvusr
    password: !secret tvpwd
    host: 192.168.137.29
    name: TV
  #UTVPC Kodi
  - platform: kodi
    port: 1025
    username: !secret utvpcusr
    password: !secret utvpcpwd
    host: 192.168.137.1
    name: server
  #Alexa Stick All (TV)
  - platform: androidtv
    name: Fire
    host: 192.168.137.29
    adbkey: "/home/homeassistant/.homeassistant/adbkey"


  #Spotify
  - platform: spotify
    client_id: !secret spot_id
    client_secret: !secret spot_pwd

alexa_media:
  accounts:
  #Alexa
    email: !secret alexa_user
    password: !secret alexa_pass
    url: amazon.co.uk



  #ChromeCast
cast:
  media_player:
    - host: 192.168.137.6

# logger:
#   default: error
#   logs:
#     custom_components.media_player.alexa: debug
#     homeassistant.components.alexa: debug

panel_custom:
  - name: floorplan
    sidebar_title: Floorplan
    sidebar_icon: mdi:home
    url_path: floorplan
    config: !include floorplan.yaml

  - name: mirror
    sidebar_title: Mirror
    sidebar_icon: mdi:monitor
    url_path: mirror
    config: !include mirror.yaml
# Allows you to issue voice commands from the frontend in enabled browsers
conversation:

# Enables support for tracking state changes over time
history:

# View all events in a logbook
#logbook:

# Enables a map showing the location of tracked devices
#map:
##Calendar
google:
  client_id: !secret goo_cal_id
  client_secret: !secret goo_cal_sec

switch:
  #Energenie Switches
  - platform: command_line
    switches:
      one:
        friendly_name: Coffee Machine
        command_on: 'curl -X POST http://127.0.0.1:8181/hub.php -d "action=status&id=1#on" -H "Content-Type:application/x-www-form-urlencoded" > /dev/null 2>&1'
        command_off: 'curl -X POST http://127.0.0.1:8181/hub.php -d "action=status&id=1#off" -H "Content-Type:application/x-www-form-urlencoded" > /dev/null 2>&1'
        command_state: '/usr/bin/test -e /var/www/html/son1.lock && echo 0 || echo 1'
        value_template: '{{ value == "0" }}'
      two:
        friendly_name: Amazon Echo
        command_on: 'curl -X POST http://127.0.0.1:8181/hub.php -d "action=status&id=2#on" -H "Content-Type:application/x-www-form-urlencoded" > /dev/null 2>&1'
        command_off: 'curl -X POST http://127.0.0.1:8181/hub.php -d "action=status&id=2#off" -H "Content-Type:application/x-www-form-urlencoded" > /dev/null 2>&1'
        command_state: '/usr/bin/test -e /var/www/html/son2.lock && echo 0 || echo 1'
        value_template: '{{ value == "0" }}'
      three:
        friendly_name: Olivia dot
        command_on: 'curl -X POST http://127.0.0.1:8181/hub.php -d "action=status&id=3#on" -H "Content-Type:application/x-www-form-urlencoded" > /dev/null 2>&1'
        command_off: 'curl -X POST http://127.0.0.1:8181/hub.php -d "action=status&id=3#off" -H "Content-Type:application/x-www-form-urlencoded" > /dev/null 2>&1'
        command_state: '/usr/bin/test -e /var/www/html/son3.lock && echo 0 || echo 1'
        value_template: '{{ value == "0" }}'
      four:
        friendly_name: Bookcase
        command_on: 'curl -X POST http://127.0.0.1:8181/hub.php -d "action=status&id=4#on" -H "Content-Type:application/x-www-form-urlencoded" > /dev/null 2>&1'
        command_off: 'curl -X POST http://127.0.0.1:8181/hub.php -d "action=status&id=4#off" -H "Content-Type:application/x-www-form-urlencoded" > /dev/null 2>&1'
        command_state: '/usr/bin/test -e /var/www/html/son4.lock && echo 0 || echo 1'
        value_template: '{{ value == "0" }}'

# switch tuya:
#   - platform: tuya
#     host: 192.168.137.21
#     device_id: 5616264384f3eb22e5c6
#     local_key: b0ef2083a74f50ef
#     switches:
#         switch1:
#           friendly_name: nightLight
#           id: 1
tuya:
  username: !secret tuser
  password: !secret tpass
  country_code: !secret tcode
  platform: smart_life


# Track the sun
sun:

#Alexa Readback
alexa:
  flash_briefings:
    hastatus:
      title: Home Assistant Status
      text: >
        Currently the flat is at {{ states("sensor.inside_temp") }} degrees and there are {{ states("sensor.plex_server") }} plex viewers.
        {% for attr in states.sensor.plex_server.attributes %}
         {%- if not attr=="friendly_name" and not attr=="unit_of_measurement" and not attr=="icon" and not attr=="templates" and not attr=="icon_color" and not attr=="custom_ui_state_card"-%}
          {{attr}} is watching: {{states.sensor.plex_server.attributes[attr]}} .
         {%- endif %}
        {%- endfor -%}
        {% set cold_temperature = [
                "Don't forget a jacket, it's cold outside",
                "It's cold today",
                "Not great outside" ] %}
        {% set perfect_temperature = [
                "Pretty average day",
                "So, so outside",
                "You may need a light jacket maybe, but it looks warm enough"] %}
        {% set hot_temperature = [
                "Awesome it is hot outside",
                "Try not to get sunburned",
                "I hope you know someone with a swimming pool" ] %}

        {% if (states.sensor.dark_sky_temperature.state | int) <= 13 %}
                {% set weather_greeting = cold_temperature | random %}
        {% elif 13 < (states.sensor.outside_temperature.state | int) <= 25 %}
                {% set weather_greeting = perfect_temperature | random %}
        {% elif (states.sensor.outside_temperature.state | int) > 25 %}
                {% set weather_greeting = hot_temperature | random %}
        {% endif %}
        {{ weather_greeting }} at {{states.sensor.dark_sky_temperature.state}} degrees, {{states.sensor.dark_sky_summary.state}}.

    tempread:
      title: Flat Temperature
      text: Currently the flat is at {{ states("sensor.inside_temp") }} degrees
    plexread:
     title: Plex users equals {{ states("sensor.plex_server") }}
     text: >
        {% for attr in states.sensor.plex_server.attributes %}
         {%- if not attr=="friendly_name" and not attr=="unit_of_measurement" and not attr=="icon" -%}
          {{attr}} is watching: {{states.sensor.plex_server.attributes[attr]}}
         {%- endif %}
        {%- endfor -%}
    devicesstatus:
     title: Home Assistant Status
     text: >
        {% if (states.group.all_lights.state) == "on"  %}
        The following lights are currently on:
            {% if (states.light.dining_main.state) == "on" %}
                    Dining Main,
            {% endif %}
            {% if (states.light.sofa_main.state) == "on" %}
                    Sofa Main,
            {% endif %}
            {% if (states.light.sofa_lamp.state) == "on" %}
                    Sofa Lamp,
            {% endif %}
            {% if (states.light.desk_lamp.state) == "on" %}
                    Desk Lamp,
            {% endif %}
            {% if (states.light.olivia_main.state) == "on" %}
                    Olivia Main,
            {% endif %}
            {% if (states.light.olivia_lamp.state) == "on" %}
                    Olivia Lamp,
            {% endif %}
            {% if (states.group.bed_group.state) == "on" %}
                    Bedroom Lights,
            {% endif %}
        {% else %}
        All lights Turned off.
        {% endif %}
        {% if (states.group.all_switches.state) == "on"  %}
        The following switches are currently on:
            {% if (states.switch.three.state) == "on" %}
                    Olivia Dot,
            {% endif %}
            {% if (states.switch.four.state) == "on" %}
                    Bookcase Lights,
            {% endif %}
            {% if (states.switch.one.state) == "on" %}
                    Coffee Machine,
            {% endif %}
            {% if (states.switch.two.state) == "on" %}
                    Living Room Echo,
            {% endif %}

        {% else %}
        All Switches Turned off.
        {% endif %}
        {% if (states.updater.updater.state) %}
         Home Assistant  {{ states.updater.updater.state }}  is now available.
        {% endif %}
        {% if (states.sensor.ssl_cert_expiry.state) < "7" %}
         Home Assistant SSL Renewal required in {{ states.sensor.ssl_cert_expiry.state }} days.
        {% endif %}

sensor:
    # Weather prediction
  - platform: darksky
    api_key: !secret ds_key
    forecast:
      - 0
    monitored_conditions:
      - temperature
      - summary
    scan_interval: 3600
  ##Templates
  - platform: template
    sensors:

      weekday:
        friendly_name: 'Weekday'
        value_template: '{{ now().strftime("%A") }}'

      ##Date in word format
      date_long:
        value_template: >
          {{ now().strftime("%A") + ' ' + now().strftime('%d') + ' ' + now().strftime('%b')}}
      ##Spotify Now playing
      spotify_title:
        value_template: >
          {% if is_state("media_player.spotify", "playing")%}
            {{states.media_player.spotify.attributes.media_title  | truncate (50)}}
          {% else %}

          {% endif %}
        friendly_name: "Spotify Title"

      spotify_artist:
        value_template: >
          {% if is_state("media_player.spotify", "playing")%}
            {{states.media_player.spotify.attributes.media_artist | truncate (50)}}
          {% else %}

          {% endif %}
        friendly_name: "Spotify Artist"

      spotify_source:
        value_template: >
          {% if is_state("media_player.spotify", "playing")%}
            Playing on: {{states.media_player.spotify.attributes.source}}
          {% else %}

          {% endif %}
        friendly_name: "Spotify Source"
      ##Travel_time
      travel_time:
        value_template: >
            {{states.sensor.google_travel_time__driving.attributes.duration_in_traffic}}
      ##Next Calendar Events
      my_event_title:
        friendly_name: "Event"
        value_template: >
            {{ states.calendar.mpatterson190285gmailcom.attributes.message | truncate (50)}}
      my_event_time:
        friendly_name: "Time"
        value_template: >
          {% set s_time = strptime(states.calendar.mpatterson190285gmailcom.attributes.start_time, "%Y-%m-%d %H:%M:%S").strftime("%H:%M") %}
          {% set e_time = strptime(states.calendar.mpatterson190285gmailcom.attributes.end_time, "%Y-%m-%d %H:%M:%S").strftime("%H:%M") %}
          {% set s_date = strptime(states.calendar.mpatterson190285gmailcom.attributes.start_time, "%Y-%m-%d %H:%M:%S").strftime("%d %b") %}
          {% if (states.calendar.mpatterson190285gmailcom.attributes.all_day) == true %}
            {{ s_date }}
          {% else %}
            {{ s_time }} to {{ e_time }} On {{ s_date }}
          {% endif %}
      my_event_description:
        friendly_name: "Description"
        value_template: >
            {{ states.calendar.mpatterson190285gmailcom.attributes.description | truncate (50) }}
      my_event_location:
        friendly_name: "Location"
        value_template: >
            {{ states.calendar.mpatterson190285gmailcom.attributes.location }}
      holiday_event_title:
        friendly_name: "Holiday"
        value_template: >
          {% set s_date = strptime(states.calendar.holidays_in_united_kingdom.attributes.start_time, "%Y-%m-%d %H:%M:%S").strftime("%d %b") %}
          {{ states.calendar.holidays_in_united_kingdom.attributes.message | truncate (27)}} On {{s_date}}
      contacts_event_title:
        friendly_name: "Event"
        value_template: >
            {{ states.calendar.contacts.attributes.message | truncate (50)}}
      contacts_event_time:
        friendly_name: "Time"
        value_template: >
          {% set s_time = strptime(states.calendar.contacts.attributes.start_time, "%Y-%m-%d %H:%M:%S").strftime("%H:%M") %}
          {% set e_time = strptime(states.calendar.contacts.attributes.end_time, "%Y-%m-%d %H:%M:%S").strftime("%H:%M") %}
          {% set s_date = strptime(states.calendar.contacts.attributes.start_time, "%Y-%m-%d %H:%M:%S").strftime("%d %b") %}
          {% if (states.calendar.contacts.attributes.all_day) == true %}
            {{ s_date }}
          {% else %}
            {{ s_time }} to {{ e_time }} On {{ s_date }}
          {% endif %}
      contacts_event_description:
        friendly_name: "Description"
        value_template: >
            {{ states.calendar.contacts.attributes.description | truncate (50) }}
      contacts_event_location:
        friendly_name: "Location"
        value_template: >
            {{ states.calendar.contacts.attributes.location }}
      fire_kodi:
        value_template: >
          {% if is_state("media_player.fire", "playing")%}
            {{states.media_player.fire.attributes.source | truncate (50)}}
          {% else %}
                    state_not:
          {% endif %}
        friendly_name: "fire_source"

    #Inside Temp
  - platform: command_line
    name: Inside Temp
    command: /usr/bin/php -r 'echo round(shell_exec("/usr/local/bin/temper-poll -c"))+3;'
    unit_of_measurement: "°C"
    scan_interval: 600

    ##SSL Cert Expiry
  - platform: command_line
    name: SSL cert expiry
    unit_of_measurement: days
    scan_interval: 86400
    command: ssl-cert-check -b -c /etc/letsencrypt/live/bighead85.duckdns.org/cert.pem | awk '{ print $NF }'
    ##Date/Time
  - platform: time_date
    display_options:
      - 'time'
      - 'date'

    #Plex Server
  - platform: plex
    host: 192.168.137.1
    port: 32400
    name: Plex Server
    username: !secret plexusr
    password: !secret plexpwd
    #Google travel info
  - platform: google_travel_time
    api_key: !secret goo_map
    origin: place_id:ChIJIz_KL4nzbUgRookwKvsq7Fg
    destination: place_id:ChIJOwiW4P91dEgRqU8ovGP1VaA
    options:
      units: imperial
#camera image
camera:
  - platform: local_file
    name: Current Image
    file_path: /home/homeassistant/.homeassistant/www/camera.jpg

  - platform: ffmpeg
    name: Camera
    input: rtsp://admin:NYQPSW@192.168.137.23:554/H264/ch1/main/av_stream

  # - platform: generic
  #   name: Traffic
  #   still_image_url: https://www.google.com/maps/@51.0025985,-3.2068304,13z/data=!5m1!1e1?hl=en-GB
#Fake buttons for Alexa config
emulated_hue:
  host_ip: 192.168.137.12
  listen_port: 8300
  off_maps_to_on_domains:
    - script
  expose_by_default: false
  exposed_domains:
    - switch
    - script
    - scene

#Restart Bedroom restart_osmc
shell_command:
  restartosmc: echo homeassistant | sudo -S systemctl restart mediacenter
  reboot: echo homeassistant | sudo -S reboot
  renew_ssl: ~/certbot/certbot-auto renew --quiet --no-self-upgrade --standalone --preferred-challenges tls-sni-01 --tls-sni-01-port 8123 --pre-hook "sudo systemctl stop home-assistant" --post-hook "sudo systemctl start home-assistant"
  update_image: /opt/vc/bin/raspistill -n -w 800 -h 600 -o /home/homeassistant/.homeassistant/www/camera.jpg &
  privacy_on: touch /home/homeassistant/.homeassistant/privacy.txt
  privacy_off: rm  /home/homeassistant/.homeassistant/privacy.txt
# Text to speech
tts:
  - platform: google_translate
    service_name: google_say

#Notifications from PushBullet
notify:
  - name: pushbullet
    platform: pushbullet
    api_key: !secret push
  - platform: kodi
    name: bedroom
    host: 192.168.137.12
    port: 1025
    username: !secret bedusr
    password: !secret bedpwd
  - platform: kodi
    name: tv
    host: 192.168.137.29
    port: 1025
    username: !secret tvusr
    password: !secret tvpwd
  - platform: nfandroidtv
    name: FTV
    host: 192.168.137.29

binary_sensor:
  - platform: command_line
    command: '/usr/bin/test -e /home/homeassistant/.homeassistant/privacy.txt && echo 0 || echo 1'
    name: Privacy
    payload_on: 0
    payload_off: 1

# binary_sensor:
#   - platform: command_line
#     command: uptime
#     name: Floorplan
# Example configuration.yaml entry
# rss_feed_template:
#   # Example: https://localhost:8123/api/rss_template/spotify
#   spotify:
#     requires_api_password: False
#     title: "Now Playing"
#     items:
#     - title: {{states.media_player.spotify.media_title}} - {{states.media_player.spotify.media_artist}}
#       description: "{% if {{states.media_player.spotify.playing}} %}---{% else %} Nothing Playing {% endif %}"
#
weather:
  - platform: darksky
    api_key: !secret ds_key
    # latitude: !secret ds_lat
    # longitude: !secret ds_long
    units: uk2
    mode: daily

#Networked Devices
device_tracker:
#   platform: bt_home_hub_5
#   host: 192.168.137.254


  - platform: ping
    hosts:
      utvpc: 192.168.137.1
      xbox360: 192.168.137.3
      oneplus6: 192.168.137.4
      mpxub: 192.168.137.5
      chromecast: 192.168.137.6
      302060046: 192.168.137.9
      firetablet: 192.168.137.11
      Smarthub: 192.168.137.12
      workphone: 192.168.137.14
      imac: 192.168.137.16
      alexastick: 192.168.137.29
      livingroomecho: 192.168.137.30
      bedroomdot: 192.168.137.31
      oliviadot: 192.168.137.32
      tradfri: 192.168.137.35

  # - platform: nmap_tracker
  #   hosts: 192.168.137.30-32
  #   home_interval: 30
  #   consider_home: 1800
  #   scan_options: -F --host-timeout 5s
system_health:


group: !include groups.yaml

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
